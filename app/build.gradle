import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.aspectj:aspectjtools:1.8.1'
    }
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
}


apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "com.danxx.views"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        ndk{
            moduleName "DanxxJniLibName"         //生成的so名字
            abiFilters "armeabi", "armeabi-v7a", "x86"  //输出指定三种abi体系结构下的so库。目前可有可无。
        }

    }

    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile project(':AppLibrary')
    compile 'com.android.support:cardview-v7:23.4.0'
    compile project(':aoplib')
    compile project(':dximageloader')
}


android.applicationVariants.all { variant ->
    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String bootclasspath = project.android.bootClasspath.join(File.pathSeparator)
        ajc(bootclasspath, javaCompile)
    }
}

def ajc(String androidbootClassFiles, JavaCompile javaCompile) {
    def log = project.logger
    log.error "========================"
    log.error "Aspectj切片开始编织Class!"
    log.error "========================"

    String[] args = ["-showWeaveInfo",
                     "-1.8",
                     "-inpath", javaCompile.destinationDir.toString(),
                     "-aspectpath", javaCompile.classpath.asPath,
                     "-d", javaCompile.destinationDir.toString(),
                     "-classpath", javaCompile.classpath.asPath,
                     "-bootclasspath", androidbootClassFiles]
    log.error args.toString()

    MessageHandler handler = new MessageHandler(true);
    new Main().run(args, handler)

    for (IMessage message : handler.getMessages(null, true)) {
        switch (message.getKind()) {
            case IMessage.ABORT:
            case IMessage.ERROR:
            case IMessage.FAIL:
                log.error message.message, message.thrown
//                throw message.thrown
                break;
            case IMessage.WARNING:
            case IMessage.INFO:
                log.info message.message, message.thrown
                break;
            case IMessage.DEBUG:
                log.debug message.message, message.thrown
                break;
        }
    }
}